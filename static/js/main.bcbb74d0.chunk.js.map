{"version":3,"sources":["components/Square.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","onClickCallback","id","value","Board","squareList","squares","i","length","concat","map","square","generateSquareComponents","PLAYER_1","generateSquares","currentId","row","push","col","App","useState","setSquares","currentPlayer","setCurrentPlayer","playerOneName","setPlayerOneName","playerTwoName","setPlayerTwoName","checkForWinner","square1","square2","square3","console","log","boardStatus","result","j","type","onChange","event","target","winner","nameWinner","squaresCopy","currentSquareCoordinates","Math","floor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bcbb74d0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Square.css'\n\n\nconst Square = (props) => {\n\n  const handleButtonClick = () => {\n    props.onClickCallback(props.id);\n  }\n  return <button className=\"square\" onClick={handleButtonClick}>{props.value}</button>\n}\n\nSquare.propTypes = {\n  value: PropTypes.string.isRequired,\n  onClickCallback: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Square;\n","import React from 'react';\nimport './Board.css';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\n\nconst generateSquareComponents = (squares, onClickCallback) => {\n\n  let squareList = []\n\n  for (let i = 0; i < squares.length; i++) {\n    squareList = squareList.concat(squares[i]);\n  }\n  return squareList.map((square) => {\n    return (\n    <Square key={square.id} id={square.id} value={square.value} onClickCallback={onClickCallback}></Square>\n    )\n  })  \n}\n\nconst Board = (props) => {\n  const squareList = generateSquareComponents(props.squares, props.onClickCallback);\n  return <div className=\"grid\" >\n    {squareList}\n  </div>\n}\n\nBoard.propTypes = {\n  squares: PropTypes.arrayOf(\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        value: PropTypes.string.isRequired\n      })\n    )\n  ),\n  onClickCallback: PropTypes.func.isRequired,\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Board from './components/Board';\n\n\nconst PLAYER_1 = 'x';\nconst PLAYER_2 = 'o';\n\nconst generateSquares = () => {\n\n  const squares = [];\n\n  let currentId = 0;\n\n  for (let row = 0; row < 3; row += 1) {\n    squares.push([]);\n    for (let col = 0; col < 3; col += 1) {\n      squares[row].push({\n        id: currentId,\n        value: '',\n      });\n      currentId += 1;\n    }\n  }\n  return squares;\n}\n\nconst App = () => {\n\n  const [squares, setSquares] = useState(generateSquares());\n\n  const [currentPlayer, setCurrentPlayer] = useState(PLAYER_1);\n\n  const [playerOneName, setPlayerOneName] = useState('');\n\n  const [playerTwoName, setPlayerTwoName] = useState('');\n\n  const updateSquare = (id) => {\n    let squaresCopy = [\n      ...squares\n    ];\n\n    // if square is empty and no winner, place X or 0\n    let currentSquareCoordinates = squaresCopy[Math.floor(id/3)][id % 3] \n    if (currentSquareCoordinates.value === '' && boardStatus() === null) {\n      currentSquareCoordinates.value = currentPlayer;\n      if (currentPlayer === PLAYER_1) {\n        setCurrentPlayer(PLAYER_2);\n      } else if (currentPlayer === PLAYER_2) {\n        setCurrentPlayer(PLAYER_1);\n      } \n      setSquares(squaresCopy);\n    } \n  }\n  \n  const checkForWinner = ((square1, square2, square3) => {\n    if (square1 === square2 && square1 === square3 && square1 !== '') {\n      console.log(square1); \n      return square1\n    } else {\n      return null;\n    }\n  })\n\n  const boardStatus = () => {\n\n    // # check each row:\n    for (let row of squares) {\n      console.log(`The row is ${row}`, squares);\n      let result = checkForWinner(row[0].value, row[1].value, row[2].value);\n      if (result !== null) {\n        return result;\n      }\n    }\n\n    // # check each column:\n    for (let j=0; j<3; j++) {\n      console.log(`The column is ${j} and the board is ${squares}`);\n      let result = checkForWinner(squares[0][j].value, squares[1][j].value, squares[2][j].value);\n      if (result !== null) {\n        return result;\n      }\n    }\n\n    // # check diagonals:\n    let result = checkForWinner(squares[0][0].value, squares[1][1].value, squares[2][2].value)\n    console.log(`Diagonal ${squares[0][0].value}`)\n    if (result !== null) {\n      return result;\n    }\n      \n    result = checkForWinner(squares[2][0].value, squares[1][1].value, squares[0][2].value)\n    if (result !== null) {\n      return result;\n    }\n\n    for (let i=0; i<3; i++) {\n      for (let j=0; j<3; j++) {\n        if (squares[i][j].value === '') {\n          return null\n        }\n      }\n    }\n    return 'Tie!'\n  }\n\n  const nameWinner = () => {\n    let winner = boardStatus();\n    if (winner === 'Tie!') {\n      return 'Tie!';\n    } else if (winner === 'x') {\n      if (playerOneName !== '') {\n        return playerOneName;\n      } else {\n        return winner;\n      }\n    } else if (winner === 'o') {\n      if (playerTwoName !== '') {\n        return playerTwoName;\n      } else {\n        return winner;\n      }\n    }\n  }\n\n  const resetGame = () => {\n    setSquares(generateSquares())\n    setCurrentPlayer(PLAYER_1)\n    setPlayerOneName('')\n    setPlayerTwoName('')\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>React Tic Tac Toe</h1>\n        <label className=\"Label\">Player 1 -\n          <input type='text' value={playerOneName} onChange={(event) => setPlayerOneName(event.target.value)}/>\n        </label>\n        <label className=\"Label\">Player 2 -\n          <input type='text'  value={playerTwoName} onChange={(event) => setPlayerTwoName(event.target.value)}/>\n        </label>\n        <h2>Winner is {nameWinner()} </h2>\n        <button onClick={resetGame}>Reset Game</button>\n      </header>\n      <main>\n        <Board squares={squares} onClickCallback={updateSquare}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}